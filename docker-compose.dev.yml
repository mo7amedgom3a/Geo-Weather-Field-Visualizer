version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: geo-weather-mysql-dev
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: 2003
      MYSQL_DATABASE: geo_weather_db
      MYSQL_USER: geo_user
      MYSQL_PASSWORD: geo_password
    ports:
      - "3307:3306"
    volumes:
      - mysql_data_dev:/var/lib/mysql
      - ./backend/src/config/database.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - geo-weather-network-dev
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Backend API (Development)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: geo-weather-backend-dev
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=root
      - DB_PASSWORD=2003
      - DB_NAME=geo_weather_db
      - PORT=3001
      - NODE_ENV=development
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - geo-weather-network-dev
    volumes:
      - ./backend:/app
      - /app/node_modules
    stdin_open: true
    tty: true

  # Frontend (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: geo-weather-frontend-dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - NODE_ENV=development
    depends_on:
      - backend
    networks:
      - geo-weather-network-dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    stdin_open: true
    tty: true

volumes:
  mysql_data_dev:
    driver: local

networks:
  geo-weather-network-dev:
    driver: bridge 